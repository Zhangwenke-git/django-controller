"""
Django settings for DjangoVue project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
import datetime
from pathlib import Path
from sse.lib.utils.config_parser import ConfigParser

CONSTANT = ConfigParser()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.append(BASE_DIR)

APP_DIR = os.path.join(BASE_DIR, 'applications')
sys.path.append(APP_DIR)

JOBS_DIR = os.path.join(BASE_DIR, 'celery_job')
sys.path.append(JOBS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i(bo^m0hm-n%6%biu)$^g6c_x2^o22a#_u^u%55z@!3s+_q*u$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = CONSTANT.read_allowed_ip
ALLOWED_HOSTS = ["*"]

# Application definition
import rest_framework_jwt, rest_framework

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework_jwt',
    'rest_framework',
    'corsheaders',  # 处理跨域请求cors，实现前后端打通，任意ip访问本服务的Urls  # pip install django-cors-headers
    'django_apscheduler', #定时任务包，数据库中会新生成两个表分别为：django_apscheduler_djangojob和django_apscheduler_djangojobexecution django_apscheduler_djangojob表结构和任务执行后数据记录

    'django_celery_results',#用于存储Celery的执行结果，存放于数据库中
    'django_celery_beat',#用于定时任务

    'api',
    'user',
    'public',

]

MIDDLEWARE = [
    'sse.lib.core.logsseta.LoggerMiddleware',
    'sse.lib.core.logsseta.SentryMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 需添加，实现跨域请求
    'django.middleware.common.CommonMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware', #需注释
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 自定义中间件添加在最后
    'sse.lib.core.logsseta.CollectionMiddleware'
]

ROOT_URLCONF = 'sse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sse.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

host, username, password, database, port = CONSTANT.read_db_info

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': database,
        'USER': username,
        'PASSWORD': password,
        'HOST': host,
        'PORT': port,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

AUTH_USER_MODEL = 'user.UserProfile'

from rest_framework.settings import settings

REST_FRAMEWORK = {
'DEFAULT_RENDERER_CLASSES': (  # 默认响应渲染类
        'rest_framework.renderers.JSONRenderer',  # json渲染器
        #'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览API渲染器
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '3/min', # 未登录用户访问频率限制
        'user': '70/min', # 登录用户访问频率限制
        'project_view': '30/min', # 局部视图频率限制
        'user_view': '30/min',
    },

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # 认证组件
        'rest_framework.authentication.BasicAuthentication'
    ],
    'EXCEPTION_HANDLER': 'sse.lib.core.exceptions.exc_exceptions',  # 自定义的异常捕获
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),  # 筛选组件
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # LimitOffsetPagination 分页风格
    'PAGE_SIZE': CONSTANT.read_page_size,  # 每页多少条记录
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',  # 生成API文档
}

JWT_AUTH = {
    "JWT_AUTH_HEADER_PREFIX": "",
    "JWT_RESPONSE_PAYLOAD_HANDLER": "sse.lib.core.jwt_response_handler.jwt_response_handler",  # 自定义认证组件
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),  # 超时组件
}

CORS_ALLOW_CREDENTIALS = True
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = (
        'www.example.com',
    )

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    # 'XMLHttpRequest',
    # 'X_FILENAME',
    # 'accept-encoding',
    'authorization',
    'content-type',
    # 'redirect',
    # 'dnt',
    'origin',
    # 'user-agent',
    'x-csrftoken',
    # 'x-requested-with',
    # 'Pragma',
)


HEADER_CHECKER=False  #使用自定义的token规则还是jwt_自带的规则





"""======================================异步任务执行配置信息======================================"""

from celery import Celery, platforms
platforms.C_FORCE_ROOT = True


#launcher order
#先启动项目 python manage.py runserver 9091后再执行异步任务命令
#python manage.py celery worker --loglevel=info


#python pip 安装报错 error in setup command: use_2to3 is invalid. 解决方法:pip install setuptools==57.5.0


# 最重要的配置，设置消息broker,格式为：db://user:password@host:port/dbname
# 如果redis安装在本机，使用localhost
# 如果docker部署的redis，使用redis://redis:6379
CELERY_BROKER_URL = "redis://192.168.44.129:6379/0"

# 使用rabbit数据库
# CELERY_BROKER_URL = "amqp://admin:aaaa1111!@192.168.44.129:5672//"



# celery时区设置，建议与Django settings中TIME_ZONE同样时区，防止时差
# Django设置时区需同时设置USE_TZ=True和TIME_ZONE = 'Asia/Shanghai'
CELERY_TIMEZONE = "Asia/Shanghai"
CELERY_ENABLE_UTC = False
# 为django_celery_results存储Celery任务执行结果设置后台
# 格式为：db+scheme://user:password@host:port/dbname
# 支持数据库django-db和缓存django-cache存储任务状态及结果
CELERY_RESULT_BACKEND = "django-db"
# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# 为任务设置超时时间，单位秒。超时即中止，执行下个任务。
CELERY_TASK_TIME_LIMIT = 5

# 任务限流
CELERY_TASK_ANNOTATIONS = {'sse.celery_job.lib.jobs.celery_exec_request': {'rate_limit': '10/s'}}

# Worker并发数量，一般默认CPU核数，可以不设置
CELERY_WORKER_CONCURRENCY = 2

# 每个worker执行了多少任务就会死掉，默认是无限的
CELERY_WORKER_MAX_TASKS_PER_CHILD = 200


# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'  #可以进入Periodic Task表添加和修改周期性任务



#———————————启动步骤—————————————
#1、启动python manage.py runserver 9091命令

#2、启动Celery任务
    # Windows下测试，启动Celery
    #celery -A sse worker -l info -P eventlet

#3、启动Celery定时任务命令
#celery -A sse beat -l info

#4、启动flower,浏览器打开，管理定时任务
#celery --broker=redis://192.168.44.129:6379/0 flower #启动flower监控页面


"""============================================================================================="""
