"""
Django settings for DjangoVue project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
import datetime
from pathlib import Path
from sse.lib.utils.config_parser import ConfigParser
from sse.settings.config import *

CONSTANT = ConfigParser()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.append(BASE_DIR)

APP_DIR = os.path.join(BASE_DIR, 'applications')
sys.path.append(APP_DIR)

JOBS_DIR = os.path.join(BASE_DIR, 'celery_job')
sys.path.append(JOBS_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i(bo^m0hm-n%6%biu)$^g6c_x2^o22a#_u^u%55z@!3s+_q*u$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = CONSTANT.read_allowed_ip
ALLOWED_HOSTS = ["*"]

# Application definition
import rest_framework_jwt, rest_framework

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework_jwt',
    'rest_framework',
    'corsheaders',  # 处理跨域请求cors，实现前后端打通，任意ip访问本服务的Urls  # pip install django-cors-headers
    'django_apscheduler', #定时任务包，数据库中会新生成两个表分别为：django_apscheduler_djangojob和django_apscheduler_djangojobexecution django_apscheduler_djangojob表结构和任务执行后数据记录
    'django_celery_results',  # 用于存储Celery的执行结果，存放于数据库中
    'django_celery_beat',  # 用于定时任务
    'api',
    'user',
    'public',
]

MIDDLEWARE = [
    'sse.lib.core.logsseta.LoggerMiddleware',
    'sse.lib.core.logsseta.SentryMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 需添加，实现跨域请求
    'django.middleware.common.CommonMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',  # 需注释
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 自定义中间件添加在最后
    'sse.lib.core.logsseta.CollectionMiddleware',

    'sse.lib.utils.middleware.middleware.ApiLoggingMiddleware'
]

ROOT_URLCONF = 'sse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sse.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

host, username, password, database, port = CONSTANT.read_db_info

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': database,
        'USER': username,
        'PASSWORD': password,
        'HOST': host,
        'PORT': port,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
TEMPLATE_ROOT = os.path.join(BASE_DIR, 'templates')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    TEMPLATE_ROOT,
    MEDIA_ROOT,
]

AUTH_USER_MODEL = 'user.UserProfile'

from rest_framework.settings import settings


"""============================================================================================="""
TABLE_PREFIX = locals().get('TABLE_PREFIX', "")

API_LOG_ENABLE = True
API_LOG_METHODS = ["POST", "DELETE", "PUT"]  # ['POST', 'DELETE']
API_MODEL_MAP = {
    "/user/login/": "登录模块",
}
